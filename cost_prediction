Problem Name: A diabetes prediction problem using different types of Machine Learning (ML) algorithms and Neural Networks.

Objectives:

To acquire knowledge how to build a neural network in Python.
To learn about the activation function in the hidden and classification layer of the neural network.
To know how to compile a neural network(NN) model using loss function, optimizer and accuracy metrics.

# Downloading the data
!wget -O diabetes.csv  https://www.dropbox.com/s/sglreynnyx40pb6/diabetes.csv?dl=0
     
--2021-12-17 03:21:06--  https://www.dropbox.com/s/sglreynnyx40pb6/diabetes.csv?dl=0
Resolving www.dropbox.com (www.dropbox.com)... 162.125.68.18, 2620:100:6023:18::a27d:4312
Connecting to www.dropbox.com (www.dropbox.com)|162.125.68.18|:443... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
Location: /s/raw/sglreynnyx40pb6/diabetes.csv [following]
--2021-12-17 03:21:06--  https://www.dropbox.com/s/raw/sglreynnyx40pb6/diabetes.csv
Reusing existing connection to www.dropbox.com:443.
HTTP request sent, awaiting response... 302 Found
Location: https://uc6178813647578fd9b46b8dd628.dl.dropboxusercontent.com/cd/0/inline/Bb_i0kx3mfGCEwoSriZrbv8w-LclmVvmVM2WodL2-0F-uovsyVLiXe-E43_5ofQPaFpiTehNNUMCiXT6n0vr0DgjkosJUQbBx8S4p76_YY4VO6kjGLWgNp2A7w-EwJ9Xxw7IHldCbH_g5_KHLq06dBn0/file# [following]
--2021-12-17 03:21:06--  https://uc6178813647578fd9b46b8dd628.dl.dropboxusercontent.com/cd/0/inline/Bb_i0kx3mfGCEwoSriZrbv8w-LclmVvmVM2WodL2-0F-uovsyVLiXe-E43_5ofQPaFpiTehNNUMCiXT6n0vr0DgjkosJUQbBx8S4p76_YY4VO6kjGLWgNp2A7w-EwJ9Xxw7IHldCbH_g5_KHLq06dBn0/file
Resolving uc6178813647578fd9b46b8dd628.dl.dropboxusercontent.com (uc6178813647578fd9b46b8dd628.dl.dropboxusercontent.com)... 162.125.68.15, 2620:100:6022:15::a27d:420f
Connecting to uc6178813647578fd9b46b8dd628.dl.dropboxusercontent.com (uc6178813647578fd9b46b8dd628.dl.dropboxusercontent.com)|162.125.68.15|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 23873 (23K) [text/plain]
Saving to: ‘diabetes.csv’

diabetes.csv        100%[===================>]  23.31K  --.-KB/s    in 0.07s   

2021-12-17 03:21:07 (316 KB/s) - ‘diabetes.csv’ saved [23873/23873]

Showing the task dataset


import pandas as pd 
dataset = pd.read_csv('diabetes.csv')
dataset # To show the dataset
     
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
0	6	148	72	35	0	33.6	0.627	50	1
1	1	85	66	29	0	26.6	0.351	31	0
2	8	183	64	0	0	23.3	0.672	32	1
3	1	89	66	23	94	28.1	0.167	21	0
4	0	137	40	35	168	43.1	2.288	33	1
...	...	...	...	...	...	...	...	...	...
763	10	101	76	48	180	32.9	0.171	63	0
764	2	122	70	27	0	36.8	0.340	27	0
765	5	121	72	23	112	26.2	0.245	30	0
766	1	126	60	0	0	30.1	0.349	47	1
767	1	93	70	31	0	30.4	0.315	23	0
768 rows × 9 columns

Data Pre-processing:

First of all, all the entries in the diabetes dataset are viewed in which no categorical column is found and no missing value is present in the dataset. That's why,handling missing value is not required for this task dataset.
Using the 'head', 'shape' and 'describe' function, the dataset is further viewed.
The summation of null value in each column is viewed which is 0 as there is no null value and the data types of each column are also shown.
The features column(8) and the target (Outcome) column are separated.
Exploratory data analysis is performed on this dataset using klib library in which the highest co-rrelated feature column is found to be 'glucose'(0.47) with the target column.
Before training the developed ML and NN models, train-test splitting and feature scaling is performed.
Algorithms:

Logistic Regression (LR)
K Nearest Neighbor (KNN)
Support Vector Machine (SVM)
Decision Tree Classifier (DT)
Random Forest Classifier (RF)
Naive Bayes (NB)
Neural Network (NN)
Showing some of the first entries of the dataset


dataset.head()
     
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
0	6	148	72	35	0	33.6	0.627	50	1
1	1	85	66	29	0	26.6	0.351	31	0
2	8	183	64	0	0	23.3	0.672	32	1
3	1	89	66	23	94	28.1	0.167	21	0
4	0	137	40	35	168	43.1	2.288	33	1
Showing the shape of the dataset (rows, columns)


dataset.shape
     
(768, 9)
Showing the summary functions of each column


dataset.describe()
     
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
count	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000	768.000000
mean	3.845052	120.894531	69.105469	20.536458	79.799479	31.992578	0.471876	33.240885	0.348958
std	3.369578	31.972618	19.355807	15.952218	115.244002	7.884160	0.331329	11.760232	0.476951
min	0.000000	0.000000	0.000000	0.000000	0.000000	0.000000	0.078000	21.000000	0.000000
25%	1.000000	99.000000	62.000000	0.000000	0.000000	27.300000	0.243750	24.000000	0.000000
50%	3.000000	117.000000	72.000000	23.000000	30.500000	32.000000	0.372500	29.000000	0.000000
75%	6.000000	140.250000	80.000000	32.000000	127.250000	36.600000	0.626250	41.000000	1.000000
max	17.000000	199.000000	122.000000	99.000000	846.000000	67.100000	2.420000	81.000000	1.000000
Showing the null column if any (no null value)


dataset.isnull().sum()
     
Pregnancies                 0
Glucose                     0
BloodPressure               0
SkinThickness               0
Insulin                     0
BMI                         0
DiabetesPedigreeFunction    0
Age                         0
Outcome                     0
dtype: int64
Showing the data types of each column in the dataset


dataset.dtypes
     
Pregnancies                   int64
Glucose                       int64
BloodPressure                 int64
SkinThickness                 int64
Insulin                       int64
BMI                         float64
DiabetesPedigreeFunction    float64
Age                           int64
Outcome                       int64
dtype: object
Number of rows in 'Insulin' column having '0' value


dataset[dataset.Insulin==0]
     
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
0	6	148	72	35	0	33.6	0.627	50	1
1	1	85	66	29	0	26.6	0.351	31	0
2	8	183	64	0	0	23.3	0.672	32	1
5	5	116	74	0	0	25.6	0.201	30	0
7	10	115	0	0	0	35.3	0.134	29	0
...	...	...	...	...	...	...	...	...	...
761	9	170	74	31	0	44.0	0.403	43	1
762	9	89	62	0	0	22.5	0.142	33	0
764	2	122	70	27	0	36.8	0.340	27	0
766	1	126	60	0	0	30.1	0.349	47	1
767	1	93	70	31	0	30.4	0.315	23	0
374 rows × 9 columns

Number of rows in 'SkinThickness' column having '0' value


dataset[dataset.SkinThickness==0]
     
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
2	8	183	64	0	0	23.3	0.672	32	1
5	5	116	74	0	0	25.6	0.201	30	0
7	10	115	0	0	0	35.3	0.134	29	0
9	8	125	96	0	0	0.0	0.232	54	1
10	4	110	92	0	0	37.6	0.191	30	0
...	...	...	...	...	...	...	...	...	...
757	0	123	72	0	0	36.3	0.258	52	1
758	1	106	76	0	0	37.5	0.197	26	0
759	6	190	92	0	0	35.5	0.278	66	1
762	9	89	62	0	0	22.5	0.142	33	0
766	1	126	60	0	0	30.1	0.349	47	1
227 rows × 9 columns

Seperating the features column and the target column of the task dataset


# Creating Feature Columns
features = dataset[['Pregnancies','Glucose', 'BloodPressure', 'SkinThickness', 'Insulin','BMI','DiabetesPedigreeFunction','Age']]
# Creating Target Columns
target = dataset[['Outcome']]
     
Showing the '1' label(268 out of 768) in target column 'Outcome'


dataset[dataset.Outcome==1]
     
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
0	6	148	72	35	0	33.6	0.627	50	1
2	8	183	64	0	0	23.3	0.672	32	1
4	0	137	40	35	168	43.1	2.288	33	1
6	3	78	50	32	88	31.0	0.248	26	1
8	2	197	70	45	543	30.5	0.158	53	1
...	...	...	...	...	...	...	...	...	...
755	1	128	88	39	110	36.5	1.057	37	1
757	0	123	72	0	0	36.3	0.258	52	1
759	6	190	92	0	0	35.5	0.278	66	1
761	9	170	74	31	0	44.0	0.403	43	1
766	1	126	60	0	0	30.1	0.349	47	1
268 rows × 9 columns

Showing the '0' label(500 out of 768) in target column 'Outcome'


dataset[dataset.Outcome==0]
     
Pregnancies	Glucose	BloodPressure	SkinThickness	Insulin	BMI	DiabetesPedigreeFunction	Age	Outcome
1	1	85	66	29	0	26.6	0.351	31	0
3	1	89	66	23	94	28.1	0.167	21	0
5	5	116	74	0	0	25.6	0.201	30	0
7	10	115	0	0	0	35.3	0.134	29	0
10	4	110	92	0	0	37.6	0.191	30	0
...	...	...	...	...	...	...	...	...	...
762	9	89	62	0	0	22.5	0.142	33	0
763	10	101	76	48	180	32.9	0.171	63	0
764	2	122	70	27	0	36.8	0.340	27	0
765	5	121	72	23	112	26.2	0.245	30	0
767	1	93	70	31	0	30.4	0.315	23	0
500 rows × 9 columns

Exploratory Data Analysis:
